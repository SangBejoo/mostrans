{"version":3,"file":"static/js/689.f8eb0de5.chunk.js","mappings":"wLAKA,MAgBA,EAhBaA,IAAoB,IAAnB,UAAEC,GAAWD,EACvB,OACIE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKL,EAAUM,MAAOC,IAAKP,EAAUQ,UAE9CP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAAD,SAAKH,EAAUQ,QACfP,EAAAA,EAAAA,MAAA,KAAGC,UAAU,QAAOC,SAAA,CAAEH,EAAUS,OAAO,MAAIT,EAAUU,YACrDN,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACC,GAAI,cAAcZ,EAAUa,KAAMX,UAAU,MAAKC,SAAC,kBACxDC,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACC,GAAI,kBAAkBZ,EAAUc,SAASN,OAAQN,UAAU,gBAAeC,SAAC,4BAEnF,EC6Bd,EAvCsBY,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EACxB,MAAM,QAAEC,EAAO,MAAEC,EAAK,KAAEC,IAASC,EAAAA,EAAAA,IAASC,EAAAA,KACnCC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,GAG/C,GAAIP,EAAS,OAAOhB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACvB,GAAIkB,EAAO,OAAOpB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,UAAQkB,EAAMO,WAEnC,MAAMC,EAAaC,KAAKC,MAAS,OAAJT,QAAI,IAAJA,GAAgB,QAAZN,EAAJM,EAAMU,kBAAU,IAAAhB,GAAS,QAATC,EAAhBD,EAAkBiB,eAAO,IAAAhB,OAArB,EAAJA,EAA2BiB,QALnC,IAWfC,EAXe,IAWDV,EAAc,GAC5BW,EAAwB,OAAJd,QAAI,IAAJA,GAAgB,QAAZJ,EAAJI,EAAMU,kBAAU,IAAAd,GAAS,QAATC,EAAhBD,EAAkBe,eAAO,IAAAd,OAArB,EAAJA,EAA2BkB,MAAMF,EAAYA,EAZlD,IAcrB,OACIlC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UAASC,SACF,OAAjBiC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,KAAItC,IACpBI,EAAAA,EAAAA,KAACmC,EAAI,CAAoBvC,UAAWA,GAAzBA,EAAUa,SAG7BT,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SACtBqC,MAAMC,KAAK,CAAEP,OAAQL,IAAc,CAACa,EAAGC,KACpCvC,EAAAA,EAAAA,KAAA,UAEIwC,QAASA,KAjBzBlB,EAiBgDiB,EAAQ,EAAG,EAC3CzC,UAAWuB,IAAgBkB,EAAQ,EAAI,SAAW,GAAGxC,SAEpDwC,EAAQ,GAJJA,SAQf,C,mFCtCd,MAAMnB,EAAqBqB,EAAAA,EAAG;;;;;;;;;;;;;;OAkBxBC,EAAwBD,EAAAA,EAAG;;;;;;;;;;;;;;;;;;;;;;OAyB3BE,EAA6BF,EAAAA,EAAG;;;;;;;;;;;;;;;;;;OAqBhCG,EAAgBH,EAAAA,EAAG;;;;;;;;;;;;;;;;OAmBnBI,EAA+BJ,EAAAA,EAAG","sources":["Card.js","CharacterList.js","queries.js"],"sourcesContent":["// src/Card.js\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Card.css';\r\n\r\nconst Card = ({ character }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"imgBx\">\r\n                <img src={character.image} alt={character.name} />\r\n            </div>\r\n            <div className=\"contentBx\">\r\n                <h3>{character.name}</h3>\r\n                <p className=\"price\">{character.status} - {character.species}</p>\r\n                <Link to={`/character/${character.id}`} className=\"buy\">View Details</Link>\r\n                <Link to={`/location?name=${character.location.name}`} className=\"location-link\">View Same Location</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_CHARACTERS } from './queries';\r\nimport Card from './Card';\r\nimport './Card.css';\r\nimport './CharacterList.css';\r\n\r\nconst CharacterList = () => {\r\n    const { loading, error, data } = useQuery(GET_ALL_CHARACTERS);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10;\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error: {error.message}</p>;\r\n\r\n    const totalPages = Math.ceil(data?.characters?.results?.length / itemsPerPage);\r\n\r\n    const handlePageChange = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n    };\r\n\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const currentCharacters = data?.characters?.results?.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n    return (\r\n        <div className=\"character-list-container\">\r\n            <div className=\"gallery\">\r\n                {currentCharacters?.map(character => (\r\n                    <Card key={character.id} character={character} />\r\n                ))}\r\n            </div>\r\n            <div className=\"pagination\">\r\n                {Array.from({ length: totalPages }, (_, index) => (\r\n                    <button\r\n                        key={index}\r\n                        onClick={() => handlePageChange(index + 1)}\r\n                        className={currentPage === index + 1 ? 'active' : ''}\r\n                    >\r\n                        {index + 1}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterList;","// src/queries.js\r\nimport { gql } from '@apollo/client'\r\n\r\n// Fetch all characters with pagination\r\nconst GET_ALL_CHARACTERS = gql`\r\n    query Character($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                image\r\n                status\r\n                species\r\n                location {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch character details by ID\r\n// Fetch character details by ID\r\nconst GET_CHARACTER_DETAILS = gql`\r\n    query Character($id: ID!) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            image\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                name\r\n            }\r\n            location {\r\n                name\r\n            }\r\n            episode {\r\n                id\r\n                name\r\n                episode\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch characters by location name\r\nconst GET_CHARACTERS_BY_LOCATION = gql`\r\n    query CharactersByLocation($locationName: String!) {\r\n        locations(filter: { name: $locationName }) {\r\n            results {\r\n                id\r\n                name\r\n                residents {\r\n                    id\r\n                    name\r\n                    image\r\n                    status\r\n                    species\r\n                    location {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch locations with pagination\r\nconst GET_LOCATIONS = gql`\r\n    query GetLocations($page: Int) {\r\n        locations(page: $page) {\r\n            info {\r\n                count\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results {\r\n                id\r\n                name\r\n                dimension\r\n                type\r\n            }\r\n        }\r\n    }`\r\n\r\n// Assign a character to a specific location\r\nconst ASSIGN_CHARACTER_TO_LOCATION = gql`\r\n    mutation AssignCharacterToLocation($characterId: ID!, $locationId: ID!) {\r\n        assignCharacterToLocation(characterId: $characterId, locationId: $locationId) {\r\n            id\r\n            name\r\n            location {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport {\r\n    GET_ALL_CHARACTERS,\r\n    GET_CHARACTER_DETAILS,\r\n    GET_CHARACTERS_BY_LOCATION,\r\n    GET_LOCATIONS,\r\n    ASSIGN_CHARACTER_TO_LOCATION\r\n}"],"names":["_ref","character","_jsxs","className","children","_jsx","src","image","alt","name","status","species","Link","to","id","location","CharacterList","_data$characters","_data$characters$resu","_data$characters2","_data$characters2$res","loading","error","data","useQuery","GET_ALL_CHARACTERS","currentPage","setCurrentPage","useState","message","totalPages","Math","ceil","characters","results","length","startIndex","currentCharacters","slice","map","Card","Array","from","_","index","onClick","gql","GET_CHARACTER_DETAILS","GET_CHARACTERS_BY_LOCATION","GET_LOCATIONS","ASSIGN_CHARACTER_TO_LOCATION"],"sourceRoot":""}