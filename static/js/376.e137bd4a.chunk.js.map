{"version":3,"file":"static/js/376.e137bd4a.chunk.js","mappings":"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","sources":["CharactersByLocation.js","queries.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { GET_LOCATIONS, GET_CHARACTERS_BY_LOCATION } from './queries';\r\nimport './CharactersByLocation.css';\r\n\r\nconst CharactersByLocation = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    const locationName = query.get('name');\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [activePage, setActivePage] = useState(1);\r\n    const [visiblePages, setVisiblePages] = useState([1, 2, 3]);\r\n    const charactersPerPage = 16;\r\n\r\n    const { loading, error, data } = useQuery(GET_LOCATIONS);\r\n    const { loading: charactersLoading, error: charactersError, data: charactersData } = useQuery(GET_CHARACTERS_BY_LOCATION, {\r\n        variables: { locationName, page: currentPage },\r\n        skip: !locationName,\r\n    });\r\n\r\n    const totalCharacters = charactersData ? charactersData.locations.results[0].residents.length : 0;\r\n    const totalPages = Math.ceil(totalCharacters / charactersPerPage);\r\n\r\n    const handleLocationSelect = (event) => {\r\n        const selectedLocation = event.target.value;\r\n        navigate(`/location?name=${selectedLocation}`);\r\n    };\r\n\r\n    const handleCardClick = (character) => {\r\n        navigate(`/character/${character.id}`);\r\n    };\r\n\r\n    const handlePageChange = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n        setActivePage(pageNumber);\r\n        updateVisiblePages(pageNumber);\r\n    };\r\n\r\n    const updateVisiblePages = useCallback((pageNumber) => {\r\n        if (totalPages <= 3) {\r\n            setVisiblePages([...Array(totalPages).keys()].map(i => i + 1));\r\n        } else if (pageNumber === 1) {\r\n            setVisiblePages([1, 2, 3]);\r\n        } else if (pageNumber === totalPages) {\r\n            setVisiblePages([totalPages - 2, totalPages - 1, totalPages]);\r\n        } else {\r\n            setVisiblePages([pageNumber - 1, pageNumber, pageNumber + 1]);\r\n        }\r\n    }, [totalPages]);\r\n\r\n    useEffect(() => {\r\n        updateVisiblePages(currentPage);\r\n    }, [currentPage, totalPages, updateVisiblePages]);\r\n\r\n    // Reset pagination when location changes\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setActivePage(1);\r\n        updateVisiblePages(1);\r\n    }, [locationName, updateVisiblePages]);\r\n\r\n    if (loading) return <p>Loading locations...</p>;\r\n    if (error) return <p>Error {error.message}</p>;\r\n\r\n    return (\r\n        <div className=\"character-by-location p-4\">\r\n            <h1 className=\"text-2xl font-bold mb-4 text-center\">Characters by Location</h1>\r\n            <form className=\"max-w-sm mx-auto mb-4\">\r\n                <label htmlFor=\"locations\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Select a location</label>\r\n                <select\r\n                    id=\"locations\"\r\n                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\r\n                    onChange={handleLocationSelect}\r\n                    value={locationName || ''}\r\n                >\r\n                    <option value=\"\" disabled>Select a location</option>\r\n                    {data && data.locations && data.locations.results.map((location) => (\r\n                        <option key={location.id} value={location.name}>\r\n                            {location.name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </form>\r\n            {locationName && (\r\n                <div className=\"characters-list grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                    {charactersLoading ? (\r\n                        <p>Loading characters...</p>\r\n                    ) : charactersError ? (\r\n                        <p>Error {charactersError.message}</p>\r\n                    ) : (\r\n                        charactersData &&\r\n                        charactersData.locations &&\r\n                        charactersData.locations.results.length > 0 &&\r\n                        charactersData.locations.results[0].residents.length === 0 ? (\r\n                            <p>There is no character here</p>\r\n                        ) : (\r\n                            charactersData.locations.results[0].residents.slice((currentPage - 1) * charactersPerPage, currentPage * charactersPerPage).map((character) => (\r\n                                <div\r\n                                    key={character.id}\r\n                                    className=\"character-item bg-white shadow-md rounded-lg overflow-hidden\"\r\n                                    onClick={() => handleCardClick(character)}>\r\n                                    <img\r\n                                        src={character.image}\r\n                                        alt={character.name}\r\n                                        className=\"w-full h-48 object-cover\"\r\n                                    />\r\n                                    <div className=\"p-4\">\r\n                                        <p className=\"font-bold text-lg\">{character.name}</p>\r\n                                        <p className=\"text-gray-600\">{character.status} - {character.species}</p>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )\r\n                    )}\r\n                </div>\r\n            )}\r\n            {totalPages > 1 && (\r\n                <div className=\"pagination flex justify-center mt-4\">\r\n                    <button\r\n                        onClick={() => handlePageChange(currentPage - 1)}\r\n                        disabled={currentPage === 1}\r\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded mx-1\">\r\n                        Previous\r\n                    </button>\r\n                    {visiblePages.map((page) => (\r\n                        <button\r\n                            key={page}\r\n                            onClick={() => handlePageChange(page)}\r\n                            className={`px-4 py-2 ${activePage === page ? 'bg-gray-500' : 'bg-blue-500'} text-white rounded mx-1`}>\r\n                            {page}\r\n                        </button>\r\n                    ))}\r\n                    <button\r\n                        onClick={() => handlePageChange(currentPage + 1)}\r\n                        disabled={currentPage === totalPages}\r\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded mx-1\">\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharactersByLocation;","// src/queries.js\r\nimport { gql } from '@apollo/client'\r\n\r\n// Fetch all characters with pagination\r\nconst GET_ALL_CHARACTERS = gql`\r\n    query Character($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                image\r\n                status\r\n                species\r\n                location {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch character details by ID\r\n// Fetch character details by ID\r\nconst GET_CHARACTER_DETAILS = gql`\r\n    query Character($id: ID!) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            image\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                name\r\n            }\r\n            location {\r\n                name\r\n            }\r\n            episode {\r\n                id\r\n                name\r\n                episode\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch characters by location name\r\nconst GET_CHARACTERS_BY_LOCATION = gql`\r\n    query CharactersByLocation($locationName: String!) {\r\n        locations(filter: { name: $locationName }) {\r\n            results {\r\n                id\r\n                name\r\n                residents {\r\n                    id\r\n                    name\r\n                    image\r\n                    status\r\n                    species\r\n                    location {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch locations with pagination\r\nconst GET_LOCATIONS = gql`\r\n    query GetLocations($page: Int) {\r\n        locations(page: $page) {\r\n            info {\r\n                count\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results {\r\n                id\r\n                name\r\n                dimension\r\n                type\r\n            }\r\n        }\r\n    }`\r\n\r\n// Assign a character to a specific location\r\nconst ASSIGN_CHARACTER_TO_LOCATION = gql`\r\n    mutation AssignCharacterToLocation($characterId: ID!, $locationId: ID!) {\r\n        assignCharacterToLocation(characterId: $characterId, locationId: $locationId) {\r\n            id\r\n            name\r\n            location {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport {\r\n    GET_ALL_CHARACTERS,\r\n    GET_CHARACTER_DETAILS,\r\n    GET_CHARACTERS_BY_LOCATION,\r\n    GET_LOCATIONS,\r\n    ASSIGN_CHARACTER_TO_LOCATION\r\n}"],"names":["CharactersByLocation","navigate","useNavigate","location","useLocation","locationName","URLSearchParams","search","get","currentPage","setCurrentPage","useState","activePage","setActivePage","visiblePages","setVisiblePages","loading","error","data","useQuery","GET_LOCATIONS","charactersLoading","charactersError","charactersData","GET_CHARACTERS_BY_LOCATION","variables","page","skip","totalCharacters","locations","results","residents","length","totalPages","Math","ceil","handlePageChange","pageNumber","updateVisiblePages","useCallback","Array","keys","map","i","useEffect","_jsx","children","_jsxs","message","className","htmlFor","id","onChange","event","selectedLocation","target","value","disabled","name","slice","character","onClick","handleCardClick","src","image","alt","status","species","GET_ALL_CHARACTERS","gql","GET_CHARACTER_DETAILS","ASSIGN_CHARACTER_TO_LOCATION"],"sourceRoot":""}