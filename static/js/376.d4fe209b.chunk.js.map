{"version":3,"file":"static/js/376.d4fe209b.chunk.js","mappings":"sLAOA,MAyEA,EAzE6BA,KACzB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EADQ,IAAIC,gBAAgBH,EAASI,QAChBC,IAAI,SAEzB,QAAEC,EAAO,MAAEC,EAAK,KAAEC,IAASC,EAAAA,EAAAA,IAASC,EAAAA,KAClCJ,QAASK,EAAmBJ,MAAOK,EAAiBJ,KAAMK,IAAmBJ,EAAAA,EAAAA,IAASK,EAAAA,GAA4B,CACtHC,UAAW,CAAEb,gBACbc,MAAOd,IAWX,OAAII,GAAgBW,EAAAA,EAAAA,KAAA,KAAAC,SAAG,yBACnBX,GAAcY,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,SAAOX,EAAMa,YAG9BD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4BAA2BH,SAAA,EACtCD,EAAAA,EAAAA,KAAA,MAAII,UAAU,sCAAqCH,SAAC,4BACpDD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,0DAAyDH,SACnEV,GAAQA,EAAKc,WAAad,EAAKc,UAAUC,QAAQC,KAAKxB,IACnDiB,EAAAA,EAAAA,KAAA,UAEIQ,QAASA,IAlBCvB,KAC1BJ,EAAS,kBAAkBI,IAAe,EAiBXwB,CAAqB1B,EAAS2B,MAC7CN,UAAU,2CAA0CH,SACnDlB,EAAS2B,MAHL3B,EAAS4B,QAOzB1B,IACGe,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sFAAqFH,SAC/FP,GACGM,EAAAA,EAAAA,KAAA,KAAAC,SAAG,0BACHN,GACAO,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,SAAON,EAAgBQ,WAE1BP,GACAA,EAAeS,WACfT,EAAeS,UAAUC,QAAQM,OAAS,GACe,IAAzDhB,EAAeS,UAAUC,QAAQ,GAAGO,UAAUD,QAC1CZ,EAAAA,EAAAA,KAAA,KAAAC,SAAG,+BAEHL,EAAeS,UAAUC,QAAQ,GAAGO,UAAUN,KAAKO,IAC/CZ,EAAAA,EAAAA,MAAA,OAEIE,UAAU,+DACVI,QAASA,IArChBM,KACrBjC,EAAS,cAAciC,EAAUH,KAAK,EAoCKI,CAAgBD,GAAWb,SAAA,EAC1CD,EAAAA,EAAAA,KAAA,OACIgB,IAAKF,EAAUG,MACfC,IAAKJ,EAAUJ,KACfN,UAAU,8BAEdF,EAAAA,EAAAA,MAAA,OAAKE,UAAU,MAAKH,SAAA,EAChBD,EAAAA,EAAAA,KAAA,KAAGI,UAAU,oBAAmBH,SAAEa,EAAUJ,QAC5CR,EAAAA,EAAAA,MAAA,KAAGE,UAAU,gBAAeH,SAAA,CAAEa,EAAUK,OAAO,MAAIL,EAAUM,gBAV5DN,EAAUH,UAkBrC,C,mFCxEd,MAAMU,EAAqBC,EAAAA,EAAG;;;;;;;;;;;;;;OAkBxBC,EAAwBD,EAAAA,EAAG;;;;;;;;;;;;;;;;;;;;;;OAyB3BzB,EAA6ByB,EAAAA,EAAG;;;;;;;;;;;;;;;;;;OAqBhC7B,EAAgB6B,EAAAA,EAAG;;;;;;;;;;;;;;;;OAmBnBE,EAA+BF,EAAAA,EAAG","sources":["CharactersByLocation.js","queries.js"],"sourcesContent":["// src/CharactersByLocation.js\r\nimport React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { GET_LOCATIONS, GET_CHARACTERS_BY_LOCATION } from './queries';\r\nimport './CharactersByLocation.css';\r\n\r\nconst CharactersByLocation = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    const locationName = query.get('name');\r\n\r\n    const { loading, error, data } = useQuery(GET_LOCATIONS);\r\n    const { loading: charactersLoading, error: charactersError, data: charactersData } = useQuery(GET_CHARACTERS_BY_LOCATION, {\r\n        variables: { locationName },\r\n        skip: !locationName,\r\n    });\r\n\r\n    const handleLocationSelect = (locationName) => {\r\n        navigate(`/location?name=${locationName}`);\r\n    };\r\n\r\n    const handleCardClick = (character) => {\r\n        navigate(`/character/${character.id}`);\r\n    };\r\n\r\n    if (loading) return <p>Loading locations...</p>;\r\n    if (error) return <p>Error {error.message}</p>;\r\n\r\n    return (\r\n        <div className=\"character-by-location p-4\">\r\n            <h1 className=\"text-2xl font-bold mb-4 text-center\">Characters by Location</h1>\r\n            <div className=\"locations-list flex flex-wrap justify-center gap-2 mb-4\">\r\n                {data && data.locations && data.locations.results.map((location) => (\r\n                    <button\r\n                        key={location.id}\r\n                        onClick={() => handleLocationSelect(location.name)}\r\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded\">\r\n                        {location.name}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n            {locationName && (\r\n                <div className=\"characters-list grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                    {charactersLoading ? (\r\n                        <p>Loading characters...</p>\r\n                    ) : charactersError ? (\r\n                        <p>Error {charactersError.message}</p>\r\n                    ) : (\r\n                        charactersData &&\r\n                        charactersData.locations &&\r\n                        charactersData.locations.results.length > 0 &&\r\n                        charactersData.locations.results[0].residents.length === 0 ? (\r\n                            <p>There is no character here</p>\r\n                        ) : (\r\n                            charactersData.locations.results[0].residents.map((character) => (\r\n                                <div\r\n                                    key={character.id}\r\n                                    className=\"character-item bg-white shadow-md rounded-lg overflow-hidden\"\r\n                                    onClick={() => handleCardClick(character)}>\r\n                                    <img\r\n                                        src={character.image}\r\n                                        alt={character.name}\r\n                                        className=\"w-full h-48 object-cover\"\r\n                                    />\r\n                                    <div className=\"p-4\">\r\n                                        <p className=\"font-bold text-lg\">{character.name}</p>\r\n                                        <p className=\"text-gray-600\">{character.status} - {character.species}</p>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharactersByLocation;","// src/queries.js\r\nimport { gql } from '@apollo/client'\r\n\r\n// Fetch all characters with pagination\r\nconst GET_ALL_CHARACTERS = gql`\r\n    query Character($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                image\r\n                status\r\n                species\r\n                location {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch character details by ID\r\n// Fetch character details by ID\r\nconst GET_CHARACTER_DETAILS = gql`\r\n    query Character($id: ID!) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            image\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                name\r\n            }\r\n            location {\r\n                name\r\n            }\r\n            episode {\r\n                id\r\n                name\r\n                episode\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch characters by location name\r\nconst GET_CHARACTERS_BY_LOCATION = gql`\r\n    query CharactersByLocation($locationName: String!) {\r\n        locations(filter: { name: $locationName }) {\r\n            results {\r\n                id\r\n                name\r\n                residents {\r\n                    id\r\n                    name\r\n                    image\r\n                    status\r\n                    species\r\n                    location {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch locations with pagination\r\nconst GET_LOCATIONS = gql`\r\n    query GetLocations($page: Int) {\r\n        locations(page: $page) {\r\n            info {\r\n                count\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results {\r\n                id\r\n                name\r\n                dimension\r\n                type\r\n            }\r\n        }\r\n    }`\r\n\r\n// Assign a character to a specific location\r\nconst ASSIGN_CHARACTER_TO_LOCATION = gql`\r\n    mutation AssignCharacterToLocation($characterId: ID!, $locationId: ID!) {\r\n        assignCharacterToLocation(characterId: $characterId, locationId: $locationId) {\r\n            id\r\n            name\r\n            location {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport {\r\n    GET_ALL_CHARACTERS,\r\n    GET_CHARACTER_DETAILS,\r\n    GET_CHARACTERS_BY_LOCATION,\r\n    GET_LOCATIONS,\r\n    ASSIGN_CHARACTER_TO_LOCATION\r\n}"],"names":["CharactersByLocation","navigate","useNavigate","location","useLocation","locationName","URLSearchParams","search","get","loading","error","data","useQuery","GET_LOCATIONS","charactersLoading","charactersError","charactersData","GET_CHARACTERS_BY_LOCATION","variables","skip","_jsx","children","_jsxs","message","className","locations","results","map","onClick","handleLocationSelect","name","id","length","residents","character","handleCardClick","src","image","alt","status","species","GET_ALL_CHARACTERS","gql","GET_CHARACTER_DETAILS","ASSIGN_CHARACTER_TO_LOCATION"],"sourceRoot":""}