{"version":3,"file":"static/js/689.ba44a550.chunk.js","mappings":"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","sources":["Card.js","CharacterList.js","queries.js"],"sourcesContent":["// src/Card.js\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Card.css';\r\n\r\nconst Card = ({ character }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"imgBx\">\r\n                <img src={character.image} alt={character.name} />\r\n            </div>\r\n            <div className=\"contentBx\">\r\n                <h3>{character.name}</h3>\r\n                <p className=\"price\">{character.status} - {character.species}</p>\r\n                <Link to={`/character/${character.id}`} className=\"buy\">View Details</Link>\r\n                <Link to={`/location?name=${character.location.name}`} className=\"location-link\">View Same Location</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_CHARACTERS, GET_LOCATIONS } from './queries';\r\nimport Card from './Card';\r\nimport './Card.css';\r\nimport './CharacterList.css';\r\n\r\nconst CharacterList = () => {\r\n    const { loading, error, data } = useQuery(GET_ALL_CHARACTERS);\r\n    const { loading: locationsLoading, error: locationsError, data: locationsData } = useQuery(GET_LOCATIONS);\r\n    const [selectedLocation, setSelectedLocation] = useState('');\r\n\r\n    if (loading || locationsLoading) return <p>Loading...</p>;\r\n    if (error) return <p>Error: {error.message}</p>;\r\n    if (locationsError) return <p>Error: {locationsError.message}</p>;\r\n\r\n    const handleLocationChange = (e) => {\r\n        setSelectedLocation(e.target.value);\r\n    };\r\n\r\n    const filteredCharacters = selectedLocation\r\n        ? data?.characters?.results?.filter(character => character.location.name === selectedLocation)\r\n        : data?.characters?.results;\r\n\r\n    return (\r\n        <div className=\"character-list-container\">\r\n            <div className=\"filter\">\r\n                <label htmlFor=\"location\" className=\"filter-label\">Filter by Location: </label>\r\n                <select\r\n                    id=\"location\"\r\n                    value={selectedLocation}\r\n                    onChange={handleLocationChange}\r\n                    className=\"filter-select\"\r\n                >\r\n                    <option value=\"\">All Locations</option>\r\n                    {locationsData?.locations?.results?.map(location => (\r\n                        <option key={location.id} value={location.name}>\r\n                            {location.name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            <div className=\"gallery\">\r\n                {filteredCharacters?.map(character => (\r\n                    <Card key={character.id} character={character} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterList;","// src/queries.js\r\nimport { gql } from '@apollo/client'\r\n\r\n// Fetch all characters with pagination\r\nconst GET_ALL_CHARACTERS = gql`\r\n    query Character($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                image\r\n                status\r\n                species\r\n                location {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch character details by ID\r\n// Fetch character details by ID\r\nconst GET_CHARACTER_DETAILS = gql`\r\n    query Character($id: ID!) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            image\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                name\r\n            }\r\n            location {\r\n                name\r\n            }\r\n            episode {\r\n                id\r\n                name\r\n                episode\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch characters by location name\r\nconst GET_CHARACTERS_BY_LOCATION = gql`\r\n    query CharactersByLocation($locationName: String!) {\r\n        locations(filter: { name: $locationName }) {\r\n            results {\r\n                id\r\n                name\r\n                residents {\r\n                    id\r\n                    name\r\n                    image\r\n                    status\r\n                    species\r\n                    location {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch locations with pagination\r\nconst GET_LOCATIONS = gql`\r\n    query GetLocations($page: Int) {\r\n        locations(page: $page) {\r\n            info {\r\n                count\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results {\r\n                id\r\n                name\r\n                dimension\r\n                type\r\n            }\r\n        }\r\n    }`\r\n\r\n// Assign a character to a specific location\r\nconst ASSIGN_CHARACTER_TO_LOCATION = gql`\r\n    mutation AssignCharacterToLocation($characterId: ID!, $locationId: ID!) {\r\n        assignCharacterToLocation(characterId: $characterId, locationId: $locationId) {\r\n            id\r\n            name\r\n            location {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport {\r\n    GET_ALL_CHARACTERS,\r\n    GET_CHARACTER_DETAILS,\r\n    GET_CHARACTERS_BY_LOCATION,\r\n    GET_LOCATIONS,\r\n    ASSIGN_CHARACTER_TO_LOCATION\r\n}"],"names":["_ref","character","_jsxs","className","children","_jsx","src","image","alt","name","status","species","Link","to","id","location","CharacterList","_data$characters","_data$characters$resu","_data$characters2","_locationsData$locati","_locationsData$locati2","loading","error","data","useQuery","GET_ALL_CHARACTERS","locationsLoading","locationsError","locationsData","GET_LOCATIONS","selectedLocation","setSelectedLocation","useState","message","filteredCharacters","characters","results","filter","htmlFor","value","onChange","e","target","locations","map","Card","gql","GET_CHARACTER_DETAILS","GET_CHARACTERS_BY_LOCATION","ASSIGN_CHARACTER_TO_LOCATION"],"sourceRoot":""}