{"version":3,"file":"static/js/706.9e78ccf6.chunk.js","mappings":"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","sources":["../node_modules/@apollo/src/react/hooks/internal/useIsomorphicLayoutEffect.ts","CharacterDetail.js","../node_modules/@apollo/src/react/hooks/useMutation.ts","queries.js"],"sourcesContent":["import * as React from \"rehackt\";\nimport { canUseDOM } from \"../../../utilities/index.js\";\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nexport const useIsomorphicLayoutEffect =\n  canUseDOM ? React.useLayoutEffect : React.useEffect;\n","// src/CharacterDetail.js\r\nimport React, { useState } from 'react'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { GET_CHARACTER_DETAILS, ASSIGN_CHARACTER_TO_LOCATION, GET_LOCATIONS } from './queries'\r\nimport './CharacterDetail.css'\r\n\r\nconst CharacterDetail = () => {\r\n    const { id } = useParams()\r\n    const navigate = useNavigate()\r\n    const { loading, error, data } = useQuery(GET_CHARACTER_DETAILS, {\r\n        variables: { id }\r\n    })\r\n    const [locationId, setLocationId] = useState('')\r\n    const { loading: locationsLoading, error: locationsError, data: locationData } = useQuery(GET_LOCATIONS)\r\n    const [assignCharacterToLocation, { error: mutationError }] = useMutation(ASSIGN_CHARACTER_TO_LOCATION)\r\n    const [assignError, setAssignError] = useState(null)\r\n\r\n    if (loading || locationsLoading) return <p>Loading...</p>\r\n    if (error) return <p>Error {error.message}</p>\r\n    if (locationsError) return <p>Error {locationsError.message}</p>\r\n\r\n    const { character } = data\r\n\r\n    const handleAssign = async (e) => {\r\n        e.preventDefault()\r\n        setAssignError(null)\r\n\r\n        try {\r\n            await assignCharacterToLocation({\r\n                variables: { characterId: id, locationId }\r\n            })\r\n            alert('Character assigned to location successfully')\r\n        } catch (err) {\r\n            console.error('Error response:', err)\r\n            setAssignError(mutationError ? mutationError.message : err.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"character-detail\">\r\n            <div className=\"character-header\">\r\n                <img src={character.image} alt={character.name} />\r\n                <h1>{character.name}</h1>\r\n            </div>\r\n\r\n            <div className=\"character-info\">\r\n                <p><strong>Status:</strong> {character.status}</p>\r\n                <p><strong>Species:</strong> {character.species}</p>\r\n                <p><strong>Type:</strong> {character.type || 'N/A'}</p>\r\n                <p><strong>Gender:</strong> {character.gender}</p>\r\n                <p><strong>Origin:</strong> {character.origin.name}</p>\r\n                <p><strong>Last known location:</strong> {character.location.name}</p>\r\n            </div>\r\n\r\n            <div className=\"character-episodes\">\r\n                <h2>Episodes:</h2>\r\n                <ul>\r\n                    {character.episode.map((ep) => (\r\n                        <li key={ep.id}>{ep.name} ({ep.episode})</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <form onSubmit={handleAssign}>\r\n                <select\r\n                    value={locationId}\r\n                    onChange={(e) => setLocationId(e.target.value)}\r\n                    required\r\n                >\r\n                    <option value=\"\" disabled>Select a location</option>\r\n                    {locationData && locationData.locations && Array.isArray(locationData.locations.results) && locationData.locations.results.map((location) => (\r\n                        <option key={location.id} value={location.id}>\r\n                            {location.name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                <button type=\"submit\">Assign to Location</button>\r\n            </form>\r\n\r\n            {assignError && <p className=\"error\">Error: {assignError}</p>}\r\n\r\n            <div className=\"navigation-buttons\">\r\n                <button onClick={() => navigate('/character-list')}>Back to Character List</button>\r\n                <button onClick={() => navigate('/location')}>Back to CharacterByLocation</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n    export default CharacterDetail","import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","// src/queries.js\r\nimport { gql } from '@apollo/client'\r\n\r\n// Fetch all characters with pagination\r\nconst GET_ALL_CHARACTERS = gql`\r\n    query Character($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                image\r\n                status\r\n                species\r\n                location {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch character details by ID\r\n// Fetch character details by ID\r\nconst GET_CHARACTER_DETAILS = gql`\r\n    query Character($id: ID!) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            image\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                name\r\n            }\r\n            location {\r\n                name\r\n            }\r\n            episode {\r\n                id\r\n                name\r\n                episode\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch characters by location name\r\nconst GET_CHARACTERS_BY_LOCATION = gql`\r\n    query CharactersByLocation($locationName: String!) {\r\n        locations(filter: { name: $locationName }) {\r\n            results {\r\n                id\r\n                name\r\n                residents {\r\n                    id\r\n                    name\r\n                    image\r\n                    status\r\n                    species\r\n                    location {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\n// Fetch locations with pagination\r\nconst GET_LOCATIONS = gql`\r\n    query GetLocations($page: Int) {\r\n        locations(page: $page) {\r\n            info {\r\n                count\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results {\r\n                id\r\n                name\r\n                dimension\r\n                type\r\n            }\r\n        }\r\n    }`\r\n\r\n// Assign a character to a specific location\r\nconst ASSIGN_CHARACTER_TO_LOCATION = gql`\r\n    mutation AssignCharacterToLocation($characterId: ID!, $locationId: ID!) {\r\n        assignCharacterToLocation(characterId: $characterId, locationId: $locationId) {\r\n            id\r\n            name\r\n            location {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport {\r\n    GET_ALL_CHARACTERS,\r\n    GET_CHARACTER_DETAILS,\r\n    GET_CHARACTERS_BY_LOCATION,\r\n    GET_LOCATIONS,\r\n    ASSIGN_CHARACTER_TO_LOCATION\r\n}"],"names":["useIsomorphicLayoutEffect","canUseDOM","React","CharacterDetail","id","useParams","navigate","useNavigate","loading","error","data","useQuery","GET_CHARACTER_DETAILS","variables","locationId","setLocationId","useState","locationsLoading","locationsError","locationData","GET_LOCATIONS","assignCharacterToLocation","mutationError","mutation","options","client","useApolloClient","verifyDocumentType","DocumentType","Mutation","_a","called","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","__assign","ignoreResults","clientOptions","mergeOptions","mutate","then","response","errors","length","ApolloError","graphQLErrors","onError","result_1","equal","onCompleted","_b","catch","result_2","reset","result_3","useMutation","ASSIGN_CHARACTER_TO_LOCATION","assignError","setAssignError","_jsx","children","_jsxs","message","character","className","src","image","alt","name","status","species","type","gender","origin","location","episode","map","ep","onSubmit","async","e","preventDefault","characterId","alert","err","console","value","onChange","target","required","disabled","locations","Array","isArray","results","onClick","GET_ALL_CHARACTERS","gql","GET_CHARACTERS_BY_LOCATION"],"sourceRoot":""}